#ifndef SIMPLE_GUI_HPP
#define SIMPLE_GUI_HPP

#pragma region EMBEDDED_FONT
constexpr int fontWidth = 768;
constexpr int fontHeight = 16;
static const char* font_data =
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!````````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!````````````````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!````````````!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!````````````````!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!````````````````````!!!!!!!!!!!!````````````````````!!!!!!!!"
	"!!!!!!!!!!!!!!!!````````!!!!!!!!````````````````````````````!!!!"
	"!!!!!!!!````````````!!!!!!!!!!!!````````````````````````````!!!!"
	"!!!!````````````````````!!!!!!!!!!!!````````````````````!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````````````````!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````!!!!!!!!!!!!!!!!"
	"````````````````````````!!!!!!!!!!!!!!!!````````````````!!!!!!!!"
	"````````````````````!!!!!!!!!!!!````````````````````````````!!!!"
	"````````````````````````````!!!!!!!!!!!!````````````````!!!!!!!!"
	"````````!!!!!!!!!!!!````````!!!!!!!!!!!!````````````````!!!!!!!!"
	"!!!!!!!!!!!!````````````````!!!!````````````!!!!!!!!````````!!!!"
	"````````````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!````````"
	"````````!!!!!!!!!!!!````````!!!!!!!!````````````````````!!!!!!!!"
	"````````````````````````!!!!!!!!!!!!````````````````````!!!!!!!!"
	"````````````````````````!!!!!!!!!!!!````````````````````!!!!!!!!"
	"````````````````````````````````````````!!!!!!!!!!!!````````!!!!"
	"````````!!!!!!!!!!!!!!!!````````````````!!!!!!!!!!!!!!!!````````"
	"````````!!!!!!!!!!!!!!!!````````````````!!!!!!!!!!!!!!!!````````"
	"````````````````````````````````!!!!!!!!````````````````!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````````````!!!!!!!!"
	"!!!!````````!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"````````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!````````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"````````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!````````!!!!````````````!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!````````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````````!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!````````````!!!!!!!!!!!!!!!!"
	"!!!!````````````!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````````````!!!!!!!!"
	"!!!!````````!!!!!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!"
	"````````!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!````````!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!````````!!!!!!!!!!!!````````````!!!!!!!!!!!!"
	"````````!!!!!!!!!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!!!!!!!!!````````````!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!"
	"````````!!!!!!!!!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````````````````!!!!!!!!!!!!!!!!````````````!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!````````!!!!!!!!````````!!!!!!!!````````!!!!"
	"!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!````````!!!!!!!!````````!!!!!!!!````````!!!!"
	"````````!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!````````````!!!!!!!!````````````"
	"````````````!!!!!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"````````!!!!````````!!!!````````````````!!!!!!!!!!!!````````!!!!"
	"````````!!!!!!!!!!!!!!!!````````````````!!!!!!!!!!!!!!!!````````"
	"````````!!!!!!!!!!!!!!!!````````````````!!!!!!!!!!!!!!!!````````"
	"````````!!!!!!!!!!!!!!!!````````!!!!!!!!````````!!!!!!!!!!!!!!!!"
	"````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!"
	"````````!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!````````!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"````````!!!!````````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````````````!!!!!!!!"
	"!!!!!!!!````!!!!!!!!````!!!!!!!!!!!!````````!!!!````````!!!!!!!!"
	"````````!!!!!!!!!!!!!!!!````!!!!````````!!!!!!!!!!!!!!!!````!!!!"
	"!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````!!!!"
	"````````!!!!!!!!!!!!!!!!````````!!!!````````````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!"
	"!!!!!!!!````````````````!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!"
	"````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!"
	"````````!!!!!!!!!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!"
	"````````!!!!!!!!!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!!!!!!!!!````!!!!"
	"!!!!````````!!!!!!!!````````!!!!!!!!````````!!!!!!!!!!!!````!!!!"
	"!!!!````````!!!!!!!!!!!!````!!!!````````!!!!!!!!!!!!!!!!````!!!!"
	"````````!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!````````````````````````````````"
	"````````````````!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"````!!!!!!!!````````!!!!!!!!````````````!!!!!!!!!!!!````````!!!!"
	"````````!!!!!!!!!!!!!!!!````````````````!!!!!!!!!!!!!!!!````````"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!!!!!!!!!````````"
	"````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!"
	"````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````````````````````````````````"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````````````!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````````````````````````!!!!"
	"````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!!!!!````````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!"
	"!!!!````````!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!"
	"````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!"
	"!!!!````````!!!!````````!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!"
	"````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!"
	"````````!!!!!!!!!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!````````````````````````!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!"
	"````````!!!!!!!!!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!````````!!!!!!!!````````!!!!````!!!!!!!!!!!!"
	"!!!!````````!!!!````!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!"
	"````````!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!````````!!!!!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!````````````````````````````````"
	"````````````````````````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!````````!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!"
	"````````!!!!!!!!!!!!!!!!````````````````!!!!!!!!!!!!!!!!````````"
	"!!!!!!!!````````````````!!!!!!!!!!!!````````!!!!!!!!````````!!!!"
	"!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!"
	"````````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````````````!!!!!!!!!!!!"
	"!!!!````````````````!!!!!!!!!!!!!!!!````````````````````!!!!!!!!"
	"!!!!!!!!````````````````!!!!!!!!!!!!````````````````````!!!!!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!````````````!!!!````````!!!!"
	"!!!!````````!!!!````````!!!!!!!!!!!!!!!!````````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!````````````!!!!!!!!````````!!!!!!!!````````!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!````````````!!!!!!!!````````!!!!"
	"````````!!!!````````````!!!!!!!!!!!!````````````````````!!!!!!!!"
	"````````!!!!````````````!!!!!!!!!!!!````````````!!!!````````!!!!"
	"````````!!!!````````````!!!!!!!!!!!!````````````````````!!!!!!!!"
	"````````````````````````!!!!!!!!````````!!!!!!!!````````!!!!!!!!"
	"````````!!!!!!!!!!!!!!!!````````````````!!!!!!!!!!!!!!!!````````"
	"````````!!!!!!!!!!!!!!!!````````````````!!!!!!!!!!!!````````!!!!"
	"````````````````````````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````````````````````````````````"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!````````!!!!!!!!"
	"!!!!````````````````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!"
	"!!!!````````````!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!"
	"!!!!!!!!````````````````!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!"
	"````````!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!````````````````!!!!!!!!"
	"````````!!!!!!!!````````!!!!!!!!````````````````````````!!!!!!!!"
	"````````````````````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!"
	"!!!!````````````````````!!!!!!!!!!!!````````````````````````!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"````````!!!!````````````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````````````````!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!````````!!!!!!!!````````````````!!!!!!!!!!!!"
	"!!!!````````````````!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!"
	"````````````````````````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!````````````````!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!````````!!!!````````!!!!````````"
	"````````!!!!````````````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````````````````!!!!!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````````````````!!!!!!!!!!!!!!!!````````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!"
	"````````!!!!!!!!!!!!!!!!````````````````!!!!!!!!!!!!!!!!````````"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!````````````````!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!"
	"!!!!````````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!"
	"!!!!````````!!!!````````!!!!!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````!!!!````````!!!!!!!!````````!!!!!!!!!!!!````````!!!!"
	"````````````````!!!!!!!!!!!!!!!!````````!!!!!!!!````````!!!!!!!!"
	"!!!!````````````!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!````````````````````````````````"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!````````!!!!!!!!"
	"!!!!````````````!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!````````!!!!!!!!"
	"````````!!!!!!!!!!!!!!!!````````````````!!!!!!!!!!!!!!!!````````"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"````````!!!!!!!!````````!!!!!!!!!!!!````````````!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````````!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````````````````````````````````"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!````````!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"````````!!!!````````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!"
	"````````````````````````````````!!!!````````````````````````!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````````````````````````!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"````````!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!"
	"````````````````````````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!"
	"````````!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"````````!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"````````!!!!````````````````!!!!````````````````````````````!!!!"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!````````!!!!!!!!````````!!!!````!!!!!!!!!!!!"
	"!!!!````````!!!!````!!!!!!!!!!!!````````!!!!````````````````!!!!"
	"````````!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!````````````````!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!````````"
	"````````!!!!!!!!````````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!"
	"````````!!!!!!!!!!!!!!!!````````````````!!!!````````!!!!````````"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!"
	"!!!!!!!!````````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````````````````!!!!!!!!"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!"
	"````````!!!!!!!!````````!!!!!!!!````````````````````````````!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!````````!!!!!!!!"
	"!!!!````````!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!````````````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!````````!!!!````````"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!````````!!!!!!!!"
	"!!!!````````!!!!!!!!````````!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!````````!!!!!!!!"
	"````````!!!!!!!!!!!!!!!!````````````````!!!!!!!!!!!!!!!!````````"
	"!!!!!!!!````````````````!!!!!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````````````````````````!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!````````!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!"
	"````````!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!"
	"!!!!!!!!````````````````!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!"
	"````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!"
	"!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!"
	"````````!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!"
	"````````!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!````````````````````````!!!!"
	"!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"````````!!!!````````````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!````````!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!"
	"````````!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"````````!!!!!!!!````````!!!!!!!!!!!!````````!!!!````````!!!!!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!````````"
	"````````!!!!!!!!!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!"
	"````````!!!!!!!!!!!!!!!!````````````````!!!!````````!!!!````````"
	"!!!!!!!!````````````````!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!````````!!!!!!!!"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!"
	"````````!!!!!!!!````````!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!````````!!!!!!!!"
	"!!!!````````!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!````````````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!````````!!!!````````"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!````````!!!!!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````````!!!!!!!!!!!!"
	"!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!````````!!!!!!!!"
	"````````!!!!!!!!!!!!!!!!````````````````!!!!````````!!!!````````"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````````````````!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````````````````````````!!!!"
	"````!!!!!!!!!!!!!!!!````````!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!"
	"````````!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!"
	"!!!!````````!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!"
	"````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!"
	"!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!"
	"````````!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!"
	"````````!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"````````!!!!````````````!!!!!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!!!!!!!!!````!!!!"
	"!!!!````````!!!!!!!!````````!!!!!!!!````````!!!!!!!!!!!!````!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!"
	"````````!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"````````!!!!!!!!````````!!!!!!!!!!!!````````!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!!!!!````!!!!````````!!!!!!!!!!!!!!!!````````"
	"````````!!!!!!!!!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!````````!!!!````!!!!````````!!!!"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!````````!!!!````````````````````````````````"
	"!!!!````````!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"````````!!!!!!!!!!!!!!!!!!!!````!!!!!!!!````````!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!````````````!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!````````!!!!!!!!"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!"
	"````````!!!!!!!!````````!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!````````!!!!!!!!"
	"!!!!````````!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!````````!!!!````````"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!````````!!!!!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!"
	"!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!````````!!!!!!!!"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!````````!!!!````````"
	"!!!!!!!!````````````````!!!!!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!````````!!!!!!!!"
	"````````!!!!!!!!!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"````````!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"````````!!!!!!!!!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!!!!!!!!!!!!!````````!!!!!!!!````````!!!!!!!!!!!!````````!!!!"
	"````````!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!"
	"````````!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!````````!!!!!!!!````````!!!!!!!!````````!!!!"
	"!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!````````!!!!"
	"````````!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"````````!!!!!!!!````````!!!!!!!!!!!!````````!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!!!!!!!!!````````"
	"````````!!!!!!!!!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!````````!!!!````````````````!!!!"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!!!!!````````````````!!!!!!!!!!!!````````!!!!!!!!````````!!!!"
	"````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"````````!!!!!!!!!!!!!!!!````````!!!!!!!!````````!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!````````!!!!!!!!"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"````````!!!!!!!!````````!!!!!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!````````!!!!!!!!"
	"!!!!````````!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!````````!!!!!!!!````````!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!````````!!!!````````"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!````````!!!!!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!````````!!!!"
	"!!!!!!!!````````!!!!````````!!!!````````!!!!!!!!````````!!!!!!!!"
	"!!!!!!!!````````````````!!!!!!!!````````````````````````````````"
	"!!!!````````!!!!!!!!````````!!!!````````!!!!!!!!!!!!````````!!!!"
	"````````!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!````````!!!!!!!!"
	"!!!!````````````````````!!!!!!!!````!!!!!!!!!!!!!!!!````````!!!!"
	"!!!!````````````!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!````!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!````````````````!!!!!!!!!!!!````````````````````````!!!!"
	"````````````````````````````!!!!!!!!````````````````````!!!!!!!!"
	"!!!!!!!!!!!!````````````````!!!!!!!!````````````````````!!!!!!!!"
	"!!!!````````````````````!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!"
	"!!!!````````````````````!!!!!!!!!!!!````````````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!!!!!"
	"!!!!````````````````````!!!!!!!!````````!!!!!!!!!!!!````````!!!!"
	"````````````````````````!!!!!!!!!!!!!!!!````````````````!!!!!!!!"
	"````````````````````!!!!!!!!!!!!````````````````````````````!!!!"
	"````````````````!!!!!!!!!!!!!!!!!!!!!!!!````````````!!!!````!!!!"
	"````````!!!!!!!!!!!!````````!!!!!!!!!!!!````````````````!!!!!!!!"
	"!!!!````````````````!!!!!!!!!!!!````````````!!!!!!!!````````!!!!"
	"````````````````````````````!!!!````````!!!!!!!!!!!!!!!!````````"
	"````````!!!!!!!!!!!!````````!!!!!!!!````````````````````!!!!!!!!"
	"````````````````!!!!!!!!!!!!!!!!!!!!````````````````````!!!!!!!!"
	"````````````!!!!!!!!````````!!!!!!!!````````````````````!!!!!!!!"
	"!!!!!!!!````````````````!!!!!!!!!!!!````````````````````!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!````````!!!!"
	"````````!!!!!!!!!!!!!!!!````````!!!!!!!!````````````````!!!!!!!!"
	"````````````````````````````````!!!!!!!!````````````````!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!````!!!!!!!!!!!!````````````````!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````````!!!!````````!!!!"
	"!!!!````````````````````!!!!!!!!!!!!````````````````````!!!!!!!!"
	"!!!!````````````!!!!````````!!!!!!!!````````````````````!!!!!!!!"
	"````````````````!!!!!!!!!!!!!!!!!!!!````````````````````!!!!!!!!"
	"````````````!!!!!!!!````````!!!!!!!!!!!!````````````````!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!````````!!!!````````````!!!!!!!!````````!!!!"
	"!!!!!!!!````````````````!!!!!!!!````````!!!!````````!!!!````````"
	"!!!!````````!!!!!!!!````````!!!!!!!!````````````````````!!!!!!!!"
	"!!!!````````````````````!!!!!!!!!!!!````````````````````!!!!!!!!"
	"````````````````!!!!!!!!!!!!!!!!!!!!````````````````````!!!!!!!!"
	"!!!!!!!!!!!!````````````!!!!!!!!!!!!````````````!!!!````````!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!````````!!!!!!!!````````!!!!"
	"````````!!!!!!!!!!!!!!!!````````!!!!````````````````````````!!!!"
	"````````````````````````````!!!!!!!!!!!!!!!!!!!!````````````!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!````````````!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````````!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````````````````````````````"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!````````!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!````````````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"````````````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````````````!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````````````````!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	"";
#pragma endregion

#include <iostream>
#include <map>
#include <string>
#include <algorithm>
#include <vector>
#include <array>
#include <stack>
#include <cstdarg>
#include <sstream>
#include <memory>
#include <tuple>

#define SGUI_RENDERER_PRIORITY_HIGHEST 0xFFFF
#define SGUI_NO_SELECTION (INT_MIN)

namespace sgui {
	using byte = unsigned char;

	struct Color {
		float r{ 0.0f }, g{ 0.0f }, b{ 0.0f }, a{ 1.0f };

		Color() = default;

		inline Color(float r, float g, float b, float a = 1.0f)
			: r(r), g(g), b(b), a(a)
		{}

		inline Color(int hex) {
			r = float((hex >> 24) & 0xFF) / 255.0f;
			g = float((hex >> 16) & 0xFF) / 255.0f;
			b = float((hex >>  8) & 0xFF) / 255.0f;
			a = float(hex & 0xFF) / 255.0f;
		}

		inline int operator [](unsigned int i) const {
			switch (i) {
				default:
				case 0: return int(r * 255.0f);
				case 1: return int(g * 255.0f);
				case 2: return int(b * 255.0f);
				case 3: return int(a * 255.0f);
			}
		}

		inline Color bright(float v) const {
			Color col;
			col.r = std::max(std::min(r * v, 1.0f), 0.0f);
			col.g = std::max(std::min(g * v, 1.0f), 0.0f);
			col.b = std::max(std::min(b * v, 1.0f), 0.0f);
			col.a = a;
			return col;
		}

		inline Color alpha(float v) const {
			Color col;
			col.r = r;
			col.g = g;
			col.b = b;
			col.a = v;
			return col;
		}

		inline Color inverted() const {
			Color col;
			col.r = 1.0f - r;
			col.g = 1.0f - g;
			col.b = 1.0f - b;
			col.a = a;
			return col;
		}

		inline int hex() const {
			return ((*this)[0] & 0xFF) << 24 |
					((*this)[1] & 0xFF) << 16 |
					((*this)[2] & 0xFF) << 8 |
					((*this)[3] & 0xFF);
		}
	};

	struct Point {
		int x{ 0 }, y{ 0 };
		Point() = default;
		Point(int x, int y) : x(x), y(y) {}
	};

	struct Rect {
		union {
			Point pos{};
			struct { int x, y; };
		};
		
		int w{ 1 }, h{ 1 };

		Rect() = default;
		Rect(int x, int y, int w, int h) : x(x), y(y), w(w), h(h) {}

		inline bool contains(Point pt) {
			const int x = pt.x, y = pt.y;
			if (x < this->x || x >= this->w + this->x || y < this->y || y >= this->h + this->y)
				return false;
			return true;
		}

		inline Rect grow(int offset) const {
			return Rect(
				x - offset,
				y - offset,
				w + offset * 2,
				h + offset * 2
			);
		}

		inline Rect intersection(const Rect& r) const {
			int tx1 = x;
			int ty1 = y;
			int rx1 = r.x;
			int ry1 = r.y;
			int tx2 = tx1; tx2 += w;
			int ty2 = ty1; ty2 += h;
			int rx2 = rx1; rx2 += r.w;
			int ry2 = ry1; ry2 += r.h;
			if (tx1 < rx1) tx1 = rx1;
			if (ty1 < ry1) ty1 = ry1;
			if (tx2 > rx2) tx2 = rx2;
			if (ty2 > ry2) ty2 = ry2;
			tx2 -= tx1;
			ty2 -= ty1;
			return Rect(tx1, ty1, tx2, ty2);
		}

		inline bool overlaps(const Rect& r) const {
			return x + w >= r.x &&
					x <= r.x + r.w &&
					y + h >= r.y &&
					y <= r.y + r.h;
		}

		inline bool operator ==(const Rect& o) {
			return x == o.x && y == o.y && w == o.w && h == o.h;
		}

		inline bool operator !=(const Rect& o) {
			return !((*this) == o);
		}
	};

	enum WidgetState {
		StateNormal = 0,
		StateHovered,
		StateActive,
		StatePressed,
		StateDisabled
	};

	enum Alignment {
		AlignLeft = 0,
		AlignCenter,
		AlignRight
	};

	enum StyleProperty {
		PropPrimaryColor = 0,
		PropSecondaryColor,
		PropAccentColor,
		PropTextColor,
		PropPadding,
		PropGap,
		StylePropCount
	};

	enum Dock {
		DockNone = 0,
		DockTop,
		DockBottom,
		DockLeft,
		DockRight,
		DockFill
	};

	enum Overflow {
		OverfowNone = 0,
		OverfowWrap,
		OverfowEllipses
	};

	enum Orientation {
		Horizontal = 0,
		Vertical
	};

	struct LayoutRegion {
		Rect area{};
		int pad{ 0 };

		LayoutRegion() = default;
		inline LayoutRegion(Rect rect, int pad) : area(rect), pad(pad) {}

		inline Rect asRect() const {
			return area.grow(-pad);
		}
	};

	struct Widget {
		int id;
		bool justFocused, clickedOut;
		WidgetState state{ WidgetState::StateNormal };
		Rect parent, intersection;
	};

	class Renderer {
	public:
		struct Command {
			enum {
				CmdDummy = 0,
				CmdDrawLine,
				CmdDrawRect,
				CmdFillRect,
				CmdDrawImage,
				CmdSetClip,
				CmdUnsetClip
			} type{ CmdDummy };

			std::vector<Point> points;

			Color color;

			void* image{ nullptr };
			Rect src;

			int priority;
		};

		/**
		 * @brief  Loads the default bitmap font into the GUI
		 * @note   See the SDL2 implementation for an exampe
		 * @param  pixels: Image pixels in RGBA form
		 * @param  width: Image width
		 * @param  height: Image height
		 * @retval A pointer to a structure representing your texture handle
		 */
		virtual void* loadFont(const std::vector<byte>& pixels, int width, int height) = 0;

		/**
		 * @brief  Use this function for rendering API initialization
		 * @note   
		 * @retval None
		 */
		virtual void created() {}

		/**
		 * @brief  Use this function for rendering API resource disposal
		 * @note   See the SDL2 implementation for an exampe
		 * @retval None
		 */
		virtual void destroyed() {}

		/**
		 * @brief  Implement this function to process the draw commands.
		 * @note   See the SDL2 implementation for an exampe
		 * @param  cmd: The command currently being processed
		 * @retval None
		 */
		virtual void processCommand(const Command& cmd) = 0;

		/**
		 * @brief  Called before the rendering API performs the rendering
		 * @note   
		 * @retval None
		 */
		virtual void begin() {}

		/**
		 * @brief  Called after the GUI is rendered as commands
		 * @note   
		 * @retval None
		 */
		virtual void end(int width, int height) {}

		inline void finish(int width, int height) {
			std::sort(m_commands.begin(), m_commands.end(), [](const Command& a, const Command& b) {
				return a.priority < b.priority;
			});

			while (!m_commands.empty()) {
				Command cmd = m_commands.front();
				m_commands.erase(m_commands.begin());
				processCommand(cmd);
			}
			end(width, height);
			m_z = 0;
			m_zIndices.clear();
		}

		inline void line(int x1, int y1, int x2, int y2, Color color) {
			Command cmd{};
			cmd.priority = m_z++;
			cmd.type = Command::CmdDrawLine;
			cmd.color = color;
			cmd.points.push_back(Point(x1, y1));
			cmd.points.push_back(Point(x2, y2));
			m_commands.push_back(cmd);
		}

		inline void rect(Rect rect, Color color, bool fill = false) {
			Command cmd{};
			cmd.priority = m_z++;
			cmd.type = fill ? Command::CmdFillRect : Command::CmdDrawRect;
			cmd.color = color;
			cmd.points.push_back(Point(rect.x, rect.y));
			cmd.points.push_back(Point(rect.x + rect.w, rect.y + rect.h));
			m_commands.push_back(cmd);
		}

		inline void image(void* image, Rect src, Rect dst, Color color) {
			Command cmd{};
			cmd.priority = m_z++;
			cmd.type = Command::CmdDrawImage;
			cmd.color = color;
			cmd.image = image;
			cmd.src = src;
			cmd.points.push_back(Point(dst.x, dst.y));
			cmd.points.push_back(Point(dst.x + dst.w, dst.y + dst.h));
			m_commands.push_back(cmd);
		}

		inline void setClipRect(Rect rect) {
			Command cmd{};
			cmd.priority = m_z++;
			cmd.type = Command::CmdSetClip;
			cmd.points.push_back(Point(rect.x, rect.y));
			cmd.points.push_back(Point(rect.x + rect.w, rect.y + rect.h));
			m_commands.push_back(cmd);
		}

		inline void unsetClipRect() {
			Command cmd{};
			cmd.priority = m_z++;
			cmd.type = Command::CmdUnsetClip;
			m_commands.push_back(cmd);
		}

		inline void pushZIndex(int index) {
			m_zIndices.push_back(m_z);
			m_z = index;
		}

		inline void popZIndex() {
			if (!m_zIndices.empty()) {
				m_z = m_zIndices.back();
				m_zIndices.pop_back();
			}
		}

		inline void clip(Rect rect) {
			if (rect.w < 0) {
				rect.w = -rect.w;
				rect.x -= rect.w;
			}
			if (rect.h < 0) {
				rect.h = -rect.h;
				rect.y -= rect.h;
			}
			setClipRect(rect);
		}

		inline void unclip() {
			unsetClipRect();
		}
	private:
		std::vector<Command> m_commands;
		std::vector<int> m_zIndices;
		int m_z{ 0 };
	};

	enum Key {
		KeyCtrl = 0,
		KeyShift,
		KeyAlt,
		KeyBackspace,
		KeyDelete,
		KeyHome,
		KeyEnd,
		KeyLeft,
		KeyRight,
		KeyEnter,
		KeyX,
		KeyV,
		KeyC,
		KeyCount
	};

	class InputManager {
		friend class Gui;
	public:
		struct State {
			bool pressed{ false }, released{ false }, down{ false };
		};

		virtual void init(std::array<int, KeyCount>& keymap) = 0;
		virtual int time() = 0;
		virtual void processEvents(void* udata) = 0;
		virtual void setClipboardText(const std::string& text) = 0;
		virtual std::string getClipboardText() = 0;

		inline Key translateKey(int key) {
			for (size_t i = 0; i < m_keymap.size(); i++) {
				if (m_keymap[i] == key) return Key(i);
			}
			return Key::KeyCount;
		}

		inline void clear() {
			for (auto& [k, v] : m_mouse) {
				v.pressed = false;
				v.released = false;
			}
			for (auto& [k, v] : m_keyboard) {
				v.pressed = false;
				v.released = false;
			}
			m_char = 0;
		}

		inline Point mousePosition() const { return Point(m_mouseX, m_mouseY); }

		inline bool isKeyPressed(Key key) { return m_keyboard[key].pressed; }
		inline bool isKeyReleased(Key key) { return m_keyboard[key].released; }
		inline bool isKeyDown(Key key) { return m_keyboard[key].down; }

		inline bool isMouseButtonPressed(int btn) { return m_mouse[btn].pressed; }
		inline bool isMouseButtonReleased(int btn) { return m_mouse[btn].released; }
		inline bool isMouseButtonDown(int btn) { return m_mouse[btn].down; }

		inline char typedChar() const { return m_char; }

		inline int key(Key key) const { return m_keymap[key]; }

	protected:
		std::map<int, State> m_mouse;
		std::map<Key, State> m_keyboard;
		std::array<int, KeyCount> m_keymap;

		int m_mouseX{ 0 }, m_mouseY{ 0 };
		char m_char{ 0 };
	};

	class Gui {
	public:
		Gui() = default;

		virtual ~Gui() {
			m_renderer->destroyed();
		}
		
		inline Gui(InputManager* input, Renderer* renderer) {
			m_input = std::unique_ptr<InputManager>(input);
			m_renderer = std::unique_ptr<Renderer>(renderer);

			m_input->init(m_input->m_keymap);

			m_style[StyleProperty::PropAccentColor] = 0xF05522FF;
			m_style[StyleProperty::PropPrimaryColor] = 0x555555FF;
			m_style[StyleProperty::PropSecondaryColor] = 0x555555FF;
			m_style[StyleProperty::PropTextColor] = 0xFFFFFFFF;
			m_style[StyleProperty::PropPadding] = 4;
			m_style[StyleProperty::PropGap] = 4;

			size_t ptr = 0;
			std::vector<byte> pixels;
			pixels.reserve(fontWidth * fontHeight * 4);
			for (int y = 0; y < fontHeight; y++) {
				for (int x = 0; x < fontWidth; x++) {
					byte pix = (((font_data[ptr + 0] - 33) << 2) | ((font_data[ptr + 1] - 33) >> 4));
					if (pix > 120) {
						pixels.push_back(255);
						pixels.push_back(255);
						pixels.push_back(255);
						pixels.push_back(255);
					} else {
						pixels.push_back(255);
						pixels.push_back(255);
						pixels.push_back(255);
						pixels.push_back(0);
					}
					ptr += 4;
				}
			}

			m_font = m_renderer->loadFont(pixels, fontWidth, fontHeight);
			m_renderer->created();
		}

		inline LayoutRegion pushLayout(int x, int y, int w, int h, Dock dock = Dock::DockNone, int pad = 0, int gap = -1) {
			pad = pad < 0 ? m_style[StyleProperty::PropPadding] : pad;
			gap = gap < 0 ? m_style[StyleProperty::PropGap] : gap;
			
			int dx = x, dy = y, dw = w, dh = h, pd = pad;

			m_rects.push_back(Rect(dx, dy, dw, dh));
			Rect& prect = m_rects.back();

			if (!m_layoutRegions.empty()) {
				LayoutRegion& region = m_layoutRegions.back();
				Rect& parent = region.area;
				int pad = region.pad;
				switch (dock) {
					default: {
						prect.x += parent.x + pad;
						prect.y += parent.y + pad;

						dx += parent.x + pad;
						dy += parent.y + pad;
					} break;
					case Dock::DockTop: {
						prect.x = parent.x + pad;
						prect.y = parent.y + pad;

						dx = parent.x + pad;
						dy = parent.y + pad;
						dw = parent.w - pad * 2;
						parent.y += dh + gap;
						parent.h -= dh + gap;
					} break;
					case Dock::DockBottom: {
						prect.x = parent.x + pad;
						prect.y = parent.y + (parent.h - dh - pad);

						dx = parent.x + pad;
						dy = parent.y + (parent.h - dh - pad);
						dw = parent.w - pad * 2;
						parent.h -= (dh + gap);
					} break;
					case Dock::DockLeft: {
						prect.x = parent.x + pad;
						prect.y = parent.y + pad;

						dx = parent.x + pad;
						dy = parent.y + pad;
						dh = parent.h - pad * 2;
						parent.x += dw + gap;
						parent.w -= dw + gap;
					} break;
					case Dock::DockRight: {
						prect.x = parent.x + (parent.w - dw - pad);
						prect.y = parent.y + pad;

						dx = parent.x + (parent.w - dw - pad);
						dy = parent.y + pad;
						dh = parent.h - pad * 2;
						parent.x += dw + gap;
						parent.w -= dw + gap;
					} break;
					case Dock::DockFill: {
						prect.x = parent.x + pad;
						prect.y = parent.y + pad;

						dx = parent.x + pad;
						dy = parent.y + pad;
						dw = parent.w - pad * 2;
						dh = parent.h - pad * 2;
					} break;
				}
			}

			if (!m_offsets.empty()) {
				Point off = m_offsets.back();
				dx += off.x; dy += off.y;
			}

			LayoutRegion reg = LayoutRegion(Rect(dx, dy, dw, dh), pd);
			m_layoutRegions.push_back(reg);

			return reg;
		}

		inline bool popLayout() {
			if (!m_layoutRegions.empty()) {
				m_layoutRegions.pop_back();
				m_rects.pop_back();
			}
			return m_layoutRegions.empty();
		}

		inline void pushContainer(int x, int y, int w, int h, Dock dock = Dock::DockNone, int pad = -1, int gap = -1) {
			LayoutRegion reg = pushLayout(x, y, w, h, dock, pad, gap);
			Rect shad(reg.area.x + 1, reg.area.y + 1, reg.area.w, reg.area.h);
			m_renderer->rect(shad, Color(0.0f, 0.0f, 0.0f, 0.45f), true);
			m_renderer->rect(reg.area, Color(m_style[StyleProperty::PropPrimaryColor]), true);
			m_renderer->rect(reg.area, Color(m_style[StyleProperty::PropPrimaryColor]).bright(2.0f));
			m_renderer->clip(reg.asRect());
		}

		inline void popContainer() {
			m_renderer->unclip();
			popLayout(); 
		}

		inline void pushOffset(int x, int y) {
			m_offsets.push_back(Point(x, y));
		}

		inline void popOffset() {
			if (!m_offsets.empty()) m_offsets.pop_back();
		}

		inline void pushID(int id) {
			m_ids.push_back(m_id);
			m_id = id;
		}

		inline void popID() {
			if (!m_ids.empty()) {
				m_id = m_ids.back();
				m_ids.pop_back();
			}
		}

		inline void pushScrollContainer(int x, int y, int w, int h, int virtualWidth, int virtualHeight, Dock dock = Dock::DockNone, int pad = -1, int gap = -1) {
			const int scrollSize = 16;
			const Color prim = Color(m_style[StyleProperty::PropPrimaryColor]);
			const Color fg = prim.bright(2.0f);
			const Color track = prim.bright(0.5f);

			pushLayout(x, y, w, h, dock, 0, 0);
			Rect r = parentRegion().area;

			pushID(-999);
			int id1 = newID(), id2 = newID();

			if (m_scrollBars.find(id1) == m_scrollBars.end()) m_scrollBars[id1] = 0;
			if (m_scrollBars.find(id2) == m_scrollBars.end()) m_scrollBars[id2] = 0;
			pushLayout(w - scrollSize, 0, scrollSize, h - scrollSize);
				scroll(id1, virtualHeight, &m_scrollBars[id1], Orientation::Vertical);
			popLayout();

			pushLayout(0, h - scrollSize, w - scrollSize, scrollSize);
				scroll(id2, virtualWidth, &m_scrollBars[id2], Orientation::Horizontal);
			popLayout();
			popID();

			m_renderer->rect(Rect(r.x + r.w - scrollSize, r.y + r.h - scrollSize, scrollSize, scrollSize), track, true);
			m_renderer->rect(Rect(r.x + r.w - scrollSize, r.y + r.h - scrollSize, scrollSize, scrollSize), fg);

			pushContainer(0, 0, w - scrollSize, h - scrollSize, Dock::DockNone, pad, 0);
			pushLayout(0, 0, w - scrollSize, h - scrollSize, Dock::DockNone, 0, gap);
			pushOffset(-m_scrollBars[id2], -m_scrollBars[id1]);
		}

		inline void popScrollContainer() {
			popOffset();
			popLayout();
			popContainer();
			popLayout();
		}

		inline bool scroll(int id, float vmax, float* v, Orientation ori) {
			const Widget w = widget(id);
			const Rect parent = w.parent;
			const Rect shadow{ parent.x+1, parent.y+1, parent.w , parent.h };

			const float scrollSize = ori == Horizontal ? float(parent.w) : float(parent.h);

			float vratio = scrollSize > vmax ? vmax / scrollSize : scrollSize / vmax;
			int thumbSize = int(scrollSize * vratio);

			const float size = scrollSize - (thumbSize + 6);

			float ratio = (*v) / vmax;
			int rel = int(ratio * size);

			const Color prim = Color(m_style[StyleProperty::PropPrimaryColor]);
			const Color track = prim.bright(0.5f);
			const Color base = prim.bright(0.9f);
			const Color active = prim.bright(0.6f);
			const Color hover = Color(m_style[StyleProperty::PropSecondaryColor]).bright(1.2f);
			const Color fg = prim.bright(2.0f);

			Rect dstT = { parent.x, parent.y, 0, 0 };
			Rect dstT1 = { parent.x + 1, parent.y + 1, 0, 0 };

			if (ori == Horizontal) {
				dstT.x += rel + 3;
				dstT1.x += rel + 3;
				dstT.y += 3;
				dstT1.y += 3;
				dstT.w = dstT1.w = thumbSize;
				dstT.h = dstT1.h = parent.h - 6;
			} else {
				dstT.x += 3;
				dstT1.x += 3;
				dstT.y += rel + 3;
				dstT1.y += rel + 3;
				dstT.w = dstT1.w = parent.w - 6;
				dstT.h = dstT1.h = thumbSize;
			}
			
			Color tex = Color(m_style[StyleProperty::PropTextColor]);
			tex.a = 0.5f;

			m_renderer->rect(shadow, Color(0.0f, 0.0f, 0.0f, 0.45f), true);
			m_renderer->rect(parent, track, true);
			m_renderer->rect(parent, fg);

			switch (w.state) {
				default:
				case WidgetState::StateNormal: m_renderer->rect(dstT, base, true); m_renderer->rect(dstT, fg); break;
				case WidgetState::StateActive: m_renderer->rect(dstT1, active, true); m_renderer->rect(dstT1, fg); break;
				case WidgetState::StateHovered: m_renderer->rect(dstT, hover, true); m_renderer->rect(dstT, fg); break;
			}

			if (w.state == WidgetState::StateActive) {
				const Point mp = m_input->mousePosition();
				if (ori == Horizontal) {
					int mousePos = (mp.x - (parent.x + thumbSize / 2));
					if (mousePos < 0) mousePos = 0;
					if (mousePos > size) mousePos = int(size);
					float rat = float(mousePos) / size;
					*v = rat * vmax;
				} else {
					int mousePos = (mp.y - (parent.y + thumbSize / 2));
					if (mousePos < 0) mousePos = 0;
					if (mousePos > size) mousePos = int(size);
					float rat = float(mousePos) / size;
					*v = rat * vmax;
				}
				return true;
			}
			return false;
		}

		inline int chr(int x, int y, char c, Color color) {
			c = c & 0x7F;
			if (c < ' ') c = 0;
			else 		 c -= ' ';

			const Color fg = color;
			const Color sh = Color(0x000000FF);

			const int cw = 8;
			const int ch = 16;
			const Rect src{ (c % 128) * cw, 0, cw, ch };
			Rect dst{ x, y + 1, cw, ch };

			m_renderer->image(m_font, src, dst, sh);
			dst.y--;
			m_renderer->image(m_font, src, dst, fg);

			return x + cw;
		}

		inline int textWidth(const std::string& txt) {
			auto spl = tokenize(txt, '\n');
			int w = 0;
			for (auto line : spl) w = std::max(w, int(line.size() * 8));
			return w;
		}

		inline int textHeight(const std::string& txt) {
			auto spl = tokenize(txt, '\n');
			return spl.size() * 16;
		}

		inline void text(int x, int y, const std::string& txt, Color color, Overflow overflow = Overflow::OverfowNone) {
			auto spl = tokenize(txt, ' ');
			Rect parent = parentRegion().asRect();

			int tx = parent.x + x,
				ty = parent.y + y;
			bool stop = false;
			for (auto word : spl) {
				auto w = word;
				if (tx + textWidth(w) > parent.w) {
					switch (overflow) {
						case Overflow::OverfowWrap: tx = parent.x + x; ty += 16; break;
						case Overflow::OverfowEllipses: stop = true; w = "..."; break;
						default: break;
					}
				}

				for (char c : w) {
					if (c == '\t') {
						tx += 24;
					} else if (c == '\n') {
						ty += 16;
						tx = parent.x + x;
					} else {
						tx = chr(tx, ty, c, color);
					}
				}
				if (stop) break;
				tx += 8;
			}
		}

		inline void text(int x, int y, const std::string& txt, Overflow overflow = Overflow::OverfowNone) {
			text(x, y, txt, Color(m_style[StyleProperty::PropTextColor]), overflow);
		}

		inline bool button(const std::string& text) {
			const Widget btn = widget();

			const Color prim = Color(m_style[StyleProperty::PropPrimaryColor]);
			const Color base = prim.bright(0.9f);
			const Color active = prim.bright(0.6f);
			const Color hover = Color(m_style[StyleProperty::PropSecondaryColor]).bright(1.2f);
			const Color fg = prim.bright(2.0f);

			const Rect p = btn.parent;
			const Rect shadow{ p.x+1, p.y+1, p.w , p.h };

			m_renderer->rect(shadow, Color(0.0f, 0.0f, 0.0f, 0.45f), true);

			const int tw = textWidth(text);
			const int th = textHeight(text);

			switch (btn.state) {
				default:
				case WidgetState::StateNormal: m_renderer->rect(p, base, true); m_renderer->rect(p, fg); break;
				case WidgetState::StateActive: m_renderer->rect(shadow, active, true); m_renderer->rect(shadow, fg); break;
				case WidgetState::StateHovered: m_renderer->rect(p, hover, true); m_renderer->rect(p, fg); break;
			}

			this->text(p.w / 2 - tw / 2, p.h / 2 - th / 2, text, Color(m_style[StyleProperty::PropTextColor]), Overflow::OverfowEllipses);

			return btn.state == WidgetState::StatePressed;
		}

		inline bool slider(float* v, float vmin = 0.0f, float vmax = 1.0f, const std::string& fmt = "%.3f") {
			const Widget w = widget();
			const Rect parent = w.parent;
			const Rect shadow{ parent.x+1, parent.y+1, parent.w , parent.h };

			const int thumbSize = 16;
			const int width = parent.w - (thumbSize + 6);
			const float maxVal = (vmax - vmin);

			float ratio = ((*v) - vmin) / maxVal;
			int rel = int(ratio * float(width)) + 3;

			const Color prim = Color(m_style[StyleProperty::PropPrimaryColor]);
			const Color base = prim.bright(0.9f);
			const Color active = prim.bright(0.6f);
			const Color hover = Color(m_style[StyleProperty::PropSecondaryColor]).bright(1.2f);
			const Color fg = prim.bright(2.0f);
			const Color track = prim.bright(0.5f);

			const Rect dstT = { parent.x + rel, parent.y + 3, thumbSize, parent.h - 6 };
			const Rect dstT1 = { parent.x + rel + 1, parent.y + 4, thumbSize, parent.h - 6 };
			
			Color tex = Color(m_style[StyleProperty::PropTextColor]);
			tex.a = 0.5f;

			m_renderer->rect(shadow, Color(0.0f, 0.0f, 0.0f, 0.45f), true);
			m_renderer->rect(parent, track, true);
			m_renderer->rect(parent, fg);

			auto vTxt = format(fmt, *v);
			text(parent.w / 2 - textWidth(vTxt) / 2, parent.h / 2 - 8, vTxt, tex, Overflow::OverfowNone);

			switch (w.state) {
				default:
				case WidgetState::StateNormal: m_renderer->rect(dstT, base, true); m_renderer->rect(dstT, fg); break;
				case WidgetState::StateActive: m_renderer->rect(dstT1, active, true); m_renderer->rect(dstT1, fg); break;
				case WidgetState::StateHovered: m_renderer->rect(dstT, hover, true); m_renderer->rect(dstT, fg); break;
			}

			if (w.state == WidgetState::StateActive) {
				const Point mp = m_input->mousePosition();
				int mousePos = (mp.x - (parent.x + thumbSize / 2));
				if (mousePos < 0) mousePos = 0;
				if (mousePos > width) mousePos = width;
				float rat = float(mousePos) / float(width);
				*v = rat * maxVal + vmin;
				return true;
			}
			return false;
		}

		inline bool edit(std::string& text, bool obscure = false, int pad = 3, int color = -2) {
			const Widget w = widget();
			const int id = w.id;
			const Rect parent = w.parent;

			const Color prim = Color(m_style[StyleProperty::PropPrimaryColor]);
			const Color bg = prim.bright(0.7f);
			const Color bg1 = prim.bright(0.9f);
			const Color fg = prim.bright(2.0f);

			switch (w.state) {
				default:
				case WidgetState::StateNormal: m_renderer->rect(parent, bg, true); m_renderer->rect(parent, fg); break;
				case WidgetState::StateActive:
				case WidgetState::StateHovered: m_renderer->rect(parent, bg1, true); m_renderer->rect(parent, fg); break;
			}

			const Rect dstC{ parent.x + pad, parent.y + 1, parent.w - pad * 2, parent.h - 2 };
			m_renderer->clip(dstC);

			const Point mp = m_input->mousePosition();

			// Draw text
			int caret = pad + m_state.text.cursor * 8 - 3;
			int threshold = parent.w - (12 + pad);
			int offset = caret > threshold ? caret - threshold : 0;

			int x = parent.x + pad - offset, y = parent.y + parent.h / 2 - 8;
			for (size_t i = 0; i <= text.size(); i++) {
				Rect cb(x - 4, parent.y, 8, parent.h);
				if (i == text.size()) cb.w = parent.w + offset;

				if (w.state == WidgetState::StateActive && cb.contains(mp)) {
					m_state.text.cursor = i;
				}

				if (i == text.size()) continue;

				char c = text[i];
				if (c == ' ') x += 8;
				else if (c == '\t') x += 32;
				else if (c == '\n') continue;
				else x = chr(x, y, obscure ? '*' : c, color);
			}

			if (m_state.focusedItem == id && (m_input->time() >> 8) & 1) {
				chr(parent.x + caret - offset, y, '|', color);
			}

			bool changed = false;
			if (m_state.focusedItem == id) {
				int& cursor = m_state.text.cursor;
				
				if (m_input->isMouseButtonPressed(1)) {
					m_state.text.selectionStart = m_state.text.cursor;
				}

				if (m_state.text.selectionStart != -1) {
					int selStart = m_state.text.selectionStart, selEnd = m_state.text.cursor;
					if (selStart > selEnd) std::swap(selStart, selEnd);

					const int selLength = selEnd - selStart;

					if (selLength > 0) {
						const int relX = (parent.x + pad - offset);
						int fromX = relX + selStart * 8;
						int boxW = selLength * 8;
						m_renderer->rect(Rect(fromX, parent.y + parent.h / 2 - 8, boxW, 16), Color(m_style[StyleProperty::PropAccentColor]).alpha(0.5f), true);
					}
				}

				// if (w.justFocused) {
				// 	m_state.text.selectionStart = -1;
				// 	m_state.text.cursor = 0;
				// }

				bool ctrl = false;
				if (m_input->isKeyDown(Key::KeyCtrl)) {
					ctrl = true;
					if (m_state.text.selectionStart != -1) {
						int selStart = m_state.text.selectionStart, selEnd = m_state.text.cursor;
						if (selStart > selEnd) std::swap(selStart, selEnd);
						
						// Handle clipboard
						if (m_input->isKeyPressed(Key::KeyC)) {
							m_input->setClipboardText(text.substr(selStart, selEnd - selStart));
						} else if (m_input->isKeyPressed(Key::KeyX)) {
							m_input->setClipboardText(text.substr(selStart, selEnd - selStart));
							changed = clearTextSelection(text);
						} else if (m_input->isKeyPressed(Key::KeyV)) {
							changed = clearTextSelection(text);
							std::string txt = m_input->getClipboardText();
							for (char c : txt) {
								text.insert(text.begin() + cursor, c);
								cursor++;
							}
							changed = true;
						}
					} else {
						// Special navigation
						if (m_input->isKeyPressed(Key::KeyBackspace) && text.size() > 0) {
							int end = cursor;
							while (cursor > 0 && text[--cursor] != ' ');
							text.erase(text.begin() + cursor, text.begin() + end);
							changed = true;
						} else if (m_input->isKeyPressed(Key::KeyDelete)) {
							while (text[cursor] != ' ' && text.size() - cursor > 0) {
								text.erase(text.begin() + cursor);
							}
							if (text.size() - cursor > 0)
								text.erase(text.begin() + cursor);
							changed = true;
						} else if (m_input->isKeyPressed(Key::KeyLeft)) {
							while (cursor > 0 && text[--cursor] != ' ');
						} else if (m_input->isKeyPressed(Key::KeyRight)) {
							while (cursor < text.size() && text[++cursor] != ' ');
						}
					}
				} else if (m_input->isKeyPressed(Key::KeyBackspace) && !ctrl) {
					if (m_state.text.selectionStart != -1) {
						changed = clearTextSelection(text);
					} else {
						if (cursor > 0) {
							text.erase(text.begin() + (--cursor));
							changed = true;
						}
					}
				} else if (m_input->isKeyPressed(Key::KeyDelete) && !ctrl) {
					if (m_state.text.selectionStart != -1) {
						changed = clearTextSelection(text);
					} else {
						int len = text.size() - cursor;
						if (len > 0) {
							text.erase(text.begin() + cursor);
							changed = true;
						}
					}
				} else if (m_input->isKeyPressed(Key::KeyHome) && !ctrl) {
					m_state.text.selectionStart = -1;
					cursor = 0;
				} else if (m_input->isKeyPressed(Key::KeyEnd) && !ctrl) {
					m_state.text.selectionStart = -1;
					cursor = text.size();
				} else if (m_input->isKeyPressed(Key::KeyLeft) && !ctrl) {
					m_state.text.selectionStart = -1;
					if (cursor > 0) cursor--;
				} else if (m_input->isKeyPressed(Key::KeyRight) && !ctrl) {
					m_state.text.selectionStart = -1;
					if (cursor < text.size()) cursor++;
				} else {
					if (m_input->typedChar() >= 32 && m_input->typedChar() <= 127 && !ctrl) {
						clearTextSelection(text);
						text.insert(text.begin() + cursor, m_input->typedChar());
						cursor++;
						changed = true;
					}
				}
			}
			
			m_renderer->unclip();

			return changed;
		}

		inline bool toggle(const std::string& text, bool* v) {
			const Widget btn = widget();

			const Color prim = Color(m_style[StyleProperty::PropPrimaryColor]);
			const Color base = prim.bright(0.9f);
			const Color active = prim.bright(0.6f);
			const Color hover = Color(m_style[StyleProperty::PropSecondaryColor]).bright(1.2f);
			const Color fg = prim.bright(2.0f);

			const Rect p = btn.parent;
			const Rect shadow{ p.x+1, p.y+1, p.w , p.h };

			m_renderer->rect(shadow, Color(0.0f, 0.0f, 0.0f, 0.45f), true);

			const int tw = textWidth(text);
			const int th = textHeight(text);

			if (*v || btn.state == WidgetState::StateActive) {
				m_renderer->rect(shadow, active, true); m_renderer->rect(shadow, fg);
			} else {
				m_renderer->rect(p, base, true); m_renderer->rect(p, fg);
				if (btn.state == WidgetState::StateHovered) {
					m_renderer->rect(p, hover, true); m_renderer->rect(p, fg);
				}
			}
			this->text(p.w / 2 - tw / 2, p.h / 2 - th / 2, text, Color(m_style[StyleProperty::PropTextColor]), Overflow::OverfowNone);

			if (btn.state == WidgetState::StatePressed) {
				*v = !(*v);
				return true;
			}
			return false;
		}

		inline bool list(int* selected, const std::vector<std::string>& items) {
			const Widget w = widget();
			const Rect parent = w.parent;

			const Color prim = Color(m_style[StyleProperty::PropPrimaryColor]);
			const Color sel = Color(m_style[StyleProperty::PropTextColor]).inverted();
			const Color base = prim.bright(0.9f);
			const Color bg = prim.bright(0.5f);
			const Color fg = prim.bright(2.0f);

			m_renderer->rect(parent, bg, true);
			
			const Rect clip{ parent.x + 1, parent.y + 1, parent.w - 2, parent.h - 2 };
			m_renderer->clip(clip);

			int y = 3;
			bool changed = false;
			for (int i = 0; i < items.size(); i++) {
				if (y >= parent.h - 6) break;

				auto it = items[i];
				Rect ir(parent.x + 3, parent.y + y, parent.w - 6, 16);
				if (w.state == WidgetState::StatePressed && ir.contains(m_input->mousePosition())) {
					*selected = i;
					changed = true;
				}

				if (*selected == i) {
					m_renderer->rect(ir, Color(m_style[StyleProperty::PropTextColor]), true);
				}
				text(3, y, it, *selected == i ? sel : Color(m_style[StyleProperty::PropTextColor]), Overflow::OverfowEllipses);
				y += textHeight(it);

				m_renderer->line(parent.x, parent.y + y, parent.x + parent.w, parent.y + y, base);
			}
			m_renderer->unclip();
			m_renderer->rect(parent, fg);

			if (w.clickedOut) {
				m_state.focusedItem = SGUI_NO_SELECTION;
				m_state.prioritizedItem = SGUI_NO_SELECTION;
			}

			return changed;
		}

		inline bool menu(const std::string& text, int* selected, const std::vector<std::string>& items) {
			const Widget btn = widget();

			const Color prim = Color(m_style[StyleProperty::PropPrimaryColor]);
			const Color base = prim.bright(0.9f);
			const Color active = prim.bright(0.6f);
			const Color hover = Color(m_style[StyleProperty::PropSecondaryColor]).bright(1.2f);
			const Color fg = prim.bright(2.0f);

			const Rect p = btn.parent;
			const int tw = textWidth(text);
			const int th = textHeight(text);

			switch (btn.state) {
				default:
				case WidgetState::StateNormal: m_renderer->rect(p, base, true); break;
				case WidgetState::StateActive: m_renderer->rect(p, active, true); break;
				case WidgetState::StateHovered: m_renderer->rect(p, hover, true); break;
			}
			this->text(p.w / 2 - tw / 2, p.h / 2 - th / 2, text, Color(m_style[StyleProperty::PropTextColor]));

			bool clicked = false, activeItem = false;
			if (m_state.prioritizedItem == btn.id) {
				int mw = -1;
				for (auto txt : items) {
					if (txt == "-") continue;
					mw = std::max(mw, textWidth(txt));
				}
				mw += 40;

				pushLayout(0, btn.parent.h, mw, (items.size() * 16) + 16, DockNone, 4, 2);
					LayoutRegion pr = parentRegion();
					const Rect shad = Rect(pr.area.x + 1, pr.area.y + 2, pr.area.w, pr.area.h);
					m_renderer->pushZIndex(SGUI_RENDERER_PRIORITY_HIGHEST);
						m_renderer->rect(shad, Color(0.0f, 0.0f, 0.0f, 0.45f), true);
						m_renderer->rect(pr.area, base, true);
						m_renderer->rect(pr.area, fg);

						int y = pr.pad;
						int i = 0;
						for (auto txt : items) {
							if (txt == "-") {
								m_renderer->line(
									pr.area.x + pr.pad, pr.area.y + y + 2,
									pr.area.x + pr.area.w - pr.pad * 2, pr.area.y + y + 2,
									Color(0.0f, 0.0f, 0.0f, 0.6f)
								);
								y += 3;
							} else {
								Rect tr(pr.area.x + pr.pad, pr.area.y + y, pr.area.w - pr.pad * 2, 16 + pr.pad);
								Point mp = m_input->mousePosition();
								if (tr.contains(mp) && pr.area.contains(mp)) {
									if (m_input->isMouseButtonDown(1)) {
										m_renderer->rect(tr, active, true);
										activeItem = true;
									} else {
										m_renderer->rect(tr, hover, true);
									}

									if (m_input->isMouseButtonReleased(1)) {
										*selected = i;
										clicked = true;
										m_state.focusedItem = SGUI_NO_SELECTION;
										m_state.prioritizedItem = SGUI_NO_SELECTION;
									}
								}
								this->text(pr.pad, y, txt, Color(m_style[StyleProperty::PropTextColor]));
								y += 20;
								i++;
							}
						}
					m_renderer->popZIndex();
				popLayout();
			} else {
				if (btn.state == WidgetState::StatePressed && m_state.focusedItem == btn.id) {
					m_state.prioritizedItem = btn.id;
				}
			}

			if (!activeItem && btn.clickedOut) {
				m_state.focusedItem = SGUI_NO_SELECTION;
				m_state.prioritizedItem = SGUI_NO_SELECTION;
			}

			return clicked;
		}

		inline LayoutRegion parentRegion() {
			LayoutRegion rec;
			if (!m_layoutRegions.empty()) rec = m_layoutRegions.back();
			else rec = LayoutRegion(Rect(0, 0, 1, 1), 0);
			return rec;
		}

		inline Rect parentRect() {
			Rect rec;
			if (m_rects.size() >= 2) rec = m_rects[m_rects.size() - 2];
			else rec = Rect(0, 0, 1, 1);
			return rec;
		}

		inline std::string format(const std::string& fmt, ...) {
			int size = ((int)fmt.size()) * 2 + 50;
			std::string str;
			va_list ap;
			while (1) {
				str.resize(size);
				va_start(ap, fmt);
				int n = vsnprintf((char *)str.data(), size, fmt.c_str(), ap);
				va_end(ap);
				if (n > -1 && n < size) {
					str.resize(n);
					return str;
				}
				if (n > -1) size = n + 1;
				else		size *= 2;
			}
			return str;
		}

		inline InputManager* input() { return m_input.get(); }
		inline Renderer* renderer() { return m_renderer.get(); }

		inline std::array<int, StylePropCount>& style() { return m_style; }

		inline int newID() { return m_id++; }
		inline int currentID() const { return m_id - 1; }

		inline void prepare() {
			m_renderer->begin();
			m_renderer->unclip();
			m_id = 0;
		}

		inline void finish(int width, int height) {
			m_input->clear();
			m_renderer->unclip();
			m_renderer->finish(width, height);
		}

	protected:
		struct TextBoxState {
			int cursor{ 0 }, selectionStart{ -1 };
		};

		struct {
			TextBoxState text{};
			WidgetState state{ WidgetState::StateNormal };

			int focusedItem{ SGUI_NO_SELECTION }, prioritizedItem{ SGUI_NO_SELECTION };
		} m_state;

		std::unique_ptr<Renderer> m_renderer;
		std::unique_ptr<InputManager> m_input;

		std::vector<LayoutRegion> m_layoutRegions;
		std::vector<Rect> m_rects;
		std::vector<Point> m_offsets;
		std::vector<int> m_ids;
		std::map<int, float> m_scrollBars;

		std::array<int, StylePropCount> m_style;
		void* m_font;

		int m_id{ 0 };

		inline bool clearTextSelection(std::string& text) {
			if (m_state.text.selectionStart != -1) {
				int selStart = m_state.text.selectionStart, selEnd = m_state.text.cursor;
				if (selStart > selEnd) std::swap(selStart, selEnd);
				text.erase(text.begin() + selStart, text.begin() + selEnd);
				m_state.text.cursor = selStart;
				m_state.text.selectionStart = -1;
				return true;
			}
			return false;
		}

		inline std::vector<std::string> tokenize(const std::string& str, char delim)  {
			std::vector<std::string> tokens;
			std::stringstream   ss(str);
			std::string         temp;
			while(std::getline(ss, temp, delim)) {
				tokens.push_back(temp);
			}
			return tokens;
		}

		inline Widget widget(int ovid = -1) {
			const int id = ovid == -1 ? newID() : ovid;
			Rect prect = parentRect();
			Rect parent = parentRegion().asRect();
			Rect clickableArea = prect.intersection(parent);
			Widget wg;
			wg.id = id;
			wg.state = m_state.state;
			wg.parent = parent;
			wg.intersection = clickableArea;
			wg.justFocused = false;
			wg.clickedOut = false;
			
			if (m_state.state != WidgetState::StateDisabled &&
				(m_state.prioritizedItem == SGUI_NO_SELECTION || m_state.prioritizedItem == id) &&
				prect.overlaps(parent)
			) {
				if (clickableArea.contains(m_input->mousePosition())) {
					if (m_input->isMouseButtonDown(1)) {
						wg.state = WidgetState::StateActive;
					} else {
						wg.state = WidgetState::StateHovered;
					}

					if (m_input->isMouseButtonReleased(1)) wg.state = WidgetState::StatePressed;
				} else {
					wg.state = WidgetState::StateNormal;
					if (m_input->isMouseButtonPressed(1)) wg.clickedOut = true;
				}

				if (wg.state == WidgetState::StateActive && m_state.focusedItem != id) {
					m_state.text.cursor = 0;
					m_state.focusedItem = id;
					wg.justFocused = true;
				}
			}

			m_renderer->pushZIndex(999999);
			m_renderer->rect(prect, Color(1.0f, 0.0f, 0.0f, 1.0f));
			m_renderer->rect(parent, Color(0.0f, 1.0f, 0.0f, 1.0f));
			m_renderer->rect(clickableArea, Color(0.0f, 0.0f, 1.0f, 1.0f));
			m_renderer->popZIndex();

			return wg;
		}
	};

}

#endif // SIMPLE_GUI_HPP